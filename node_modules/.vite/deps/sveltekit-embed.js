import {
  fade
} from "./chunk-JL2USHXD.js";
import "./chunk-OF4EBAGI.js";
import {
  add_locations,
  append_styles,
  bind_this,
  check_target,
  cleanup_styles,
  hmr,
  if_block,
  legacy_api,
  onMount,
  prop,
  rest_props,
  set_attribute,
  set_attributes,
  set_style,
  snippet,
  transition,
  wrap_snippet
} from "./chunk-42FEYZXM.js";
import "./chunk-U7P2NEEE.js";
import {
  append,
  comment,
  template
} from "./chunk-XB2CS5CH.js";
import {
  FILENAME,
  HMR,
  child,
  effect_root,
  equals,
  first_child,
  get,
  mark_module_end,
  mark_module_start,
  noop,
  pop,
  proxy,
  push,
  replay_events,
  reset,
  set,
  sibling,
  state,
  strict_equals,
  template_effect,
  user_derived,
  user_effect
} from "./chunk-KTFBT3RB.js";
import "./chunk-X4XZK27Q.js";
import "./chunk-RVAV4ZRS.js";
import "./chunk-UGBVNEQM.js";

// node_modules/sveltekit-embed/dist/components/general-observer.svelte
mark_module_start();
General_observer[FILENAME] = "node_modules/sveltekit-embed/dist/components/general-observer.svelte";
var root_2 = add_locations(template(`<div><!></div>`), General_observer[FILENAME], [[58, 2]]);
var root_4 = add_locations(template(`<div><!></div>`), General_observer[FILENAME], [[62, 2]]);
var root_1 = add_locations(template(`<div data-testid="general-observer"><!></div>`), General_observer[FILENAME], [[56, 0]]);
function General_observer($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, General_observer);
  let threshold = prop($$props, "threshold", 3, 0.5), disable_observer = prop($$props, "disable_observer", 3, false);
  let loaded = state(proxy(disable_observer()));
  let root5;
  const hasIntersectionObserver = strict_equals(typeof IntersectionObserver, "undefined", false);
  let observer = hasIntersectionObserver && !disable_observer() ? new IntersectionObserver(
    (entries) => {
      entries.forEach((entry) => {
        if (entry.intersectionRatio >= threshold()) {
          set(loaded, true);
          observer.disconnect();
        }
      });
    },
    { rootMargin: "0px", threshold: threshold() }
  ) : null;
  user_effect(() => {
    if (observer) {
      observer.observe(root5);
    }
    return () => {
      if (observer) {
        observer.disconnect();
      }
    };
  });
  var div = root_1();
  var node = child(div);
  {
    var consequent = ($$anchor2) => {
      var div_1 = root_2();
      var node_1 = child(div_1);
      snippet(node_1, () => $$props.children);
      reset(div_1);
      transition(3, div_1, () => fade);
      append($$anchor2, div_1);
    };
    var alternate = ($$anchor2, $$elseif) => {
      {
        var consequent_1 = ($$anchor3) => {
          var div_2 = root_4();
          var node_2 = child(div_2);
          snippet(node_2, () => $$props.children);
          reset(div_2);
          transition(3, div_2, () => fade);
          append($$anchor3, div_2);
        };
        if_block(
          $$anchor2,
          ($$render) => {
            if (get(loaded)) $$render(consequent_1);
          },
          $$elseif
        );
      }
    };
    if_block(node, ($$render) => {
      if (disable_observer()) $$render(consequent);
      else $$render(alternate, false);
    });
  }
  reset(div);
  bind_this(div, ($$value) => root5 = $$value, () => root5);
  append($$anchor, div);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  General_observer = hmr(General_observer, () => General_observer[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = General_observer[HMR].source;
    set(General_observer[HMR].source, module.default[HMR].original);
  });
}
var general_observer_default = General_observer;
mark_module_end(General_observer);

// node_modules/sveltekit-embed/dist/components/anchor-fm.svelte
mark_module_start();
Anchor_fm[FILENAME] = "node_modules/sveltekit-embed/dist/components/anchor-fm.svelte";
var root_12 = add_locations(template(`<div class="anchor-fm-episode-svelte-embed"><iframe data-testid="anchor-fm-episode" frameborder="0" scrolling="no"></iframe></div>`), Anchor_fm[FILENAME], [[20, 1, [[28, 2]]]]);
function Anchor_fm($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Anchor_fm);
  let height = prop($$props, "height", 3, "100px"), width = prop($$props, "width", 3, "100%"), disable_observer = prop($$props, "disable_observer", 3, false);
  var fragment = comment();
  var node = first_child(fragment);
  general_observer_default(node, {
    get disable_observer() {
      return disable_observer();
    },
    children: wrap_snippet(Anchor_fm, ($$anchor2, $$slotProps) => {
      var div = root_12();
      var iframe = child(div);
      set_style(iframe, `
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
      `);
      reset(div);
      template_effect(() => {
        set_style(div, `
      position: relative;
      height: ${height()};
      width: ${width()};
    `);
        set_attribute(iframe, "title", `anchor-fm-${$$props.episodeUrl}`);
        set_attribute(iframe, "src", `https://anchor.fm/${$$props.episodeUrl}`);
      });
      append($$anchor2, div);
    }),
    $$slots: { default: true }
  });
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Anchor_fm = hmr(Anchor_fm, () => Anchor_fm[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Anchor_fm[HMR].source;
    set(Anchor_fm[HMR].source, module.default[HMR].original);
  });
}
var anchor_fm_default = Anchor_fm;
mark_module_end(Anchor_fm);

// node_modules/sveltekit-embed/dist/components/bluesky.svelte
mark_module_start();
Bluesky[FILENAME] = "node_modules/sveltekit-embed/dist/components/bluesky.svelte";
var root = add_locations(template(`<div class="bluesky-wrapper-container s-PNAqKTnQs1Sn"><div class="bluesky-wrapper s-PNAqKTnQs1Sn"><iframe data-testid="bluesky-embed" title="Bluesky Post Embed" frameborder="0" scrolling="no"></iframe></div></div>`), Bluesky[FILENAME], [
  [38, 0, [[39, 1, [[40, 2]]]]]
]);
var $$css = {
  hash: "s-PNAqKTnQs1Sn",
  code: "\n	.bluesky-wrapper-container.s-PNAqKTnQs1Sn {\n		display: flex;\n		justify-content: center;\n		width: 100%;\n	}\n\n	.bluesky-wrapper.s-PNAqKTnQs1Sn {\n		position: relative;\n		margin-bottom: 12px;\n		max-width: 600px;\n		min-width: 300px;\n		width: 100%;\n	}\n\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmx1ZXNreS5zdmVsdGUiLCJtYXBwaW5ncyI6IjtBQTREQSxDQUFDLHlDQUEwQixDQUFDO0FBQzVCLEVBQUUsYUFBYTtBQUNmLEVBQUUsdUJBQXVCO0FBQ3pCLEVBQUUsV0FBVztBQUNiOztBQUVBLENBQUMsK0JBQWdCLENBQUM7QUFDbEIsRUFBRSxrQkFBa0I7QUFDcEIsRUFBRSxtQkFBbUI7QUFDckIsRUFBRSxnQkFBZ0I7QUFDbEIsRUFBRSxnQkFBZ0I7QUFDbEIsRUFBRSxXQUFXO0FBQ2IiLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VzIjpbImJsdWVza3kuc3ZlbHRlIl19 */"
};
function Bluesky($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Bluesky);
  append_styles($$anchor, $$css);
  let post_id = prop($$props, "post_id", 3, ""), width = prop($$props, "width", 3, "100%"), iframe_styles = prop($$props, "iframe_styles", 3, "");
  let wrapper_height = state("174.5px");
  const get_embed_url = (post_id2) => {
    return `https://embed.bsky.app/embed/${post_id2}`;
  };
  onMount(() => {
    const handle_message = (event) => {
      if (strict_equals(event.origin, "https://embed.bsky.app", false)) return;
      if (strict_equals(typeof event.data, "object")) {
        set(wrapper_height, `${event.data.height || event.data.h || 500}px`);
      }
    };
    window.addEventListener("message", handle_message);
    return () => {
      window.removeEventListener("message", handle_message);
    };
  });
  var div = root();
  var div_1 = child(div);
  var iframe = child(div_1);
  reset(div_1);
  reset(div);
  template_effect(
    ($0) => {
      set_style(div_1, `height: ${get(wrapper_height)}`);
      set_attribute(iframe, "src", $0);
      set_attribute(iframe, "width", width());
      set_style(iframe, `
				position: absolute;
				top: 0;
				left: 0;
				width: 100%;
				height: 100%;
				border: 0px;
				${iframe_styles()}
			`);
    },
    [() => get_embed_url(post_id())]
  );
  append($$anchor, div);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Bluesky = hmr(Bluesky, () => Bluesky[HMR].source);
  import.meta.hot.accept((module) => {
    cleanup_styles("s-PNAqKTnQs1Sn");
    module.default[HMR].source = Bluesky[HMR].source;
    set(Bluesky[HMR].source, module.default[HMR].original);
  });
}
var bluesky_default = Bluesky;
mark_module_end(Bluesky);

// node_modules/sveltekit-embed/dist/components/buzzsprout.svelte
mark_module_start();
Buzzsprout[FILENAME] = "node_modules/sveltekit-embed/dist/components/buzzsprout.svelte";
var root_13 = add_locations(template(`<div class="buzzsprout-sveltekit-embed"><iframe data-testid="buzzsprout" frameBorder="0" scrolling="no"></iframe></div>`), Buzzsprout[FILENAME], [[20, 1, [[28, 2]]]]);
function Buzzsprout($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Buzzsprout);
  let width = prop($$props, "width", 3, "100%"), height = prop($$props, "height", 3, "200px"), disable_observer = prop($$props, "disable_observer", 3, false);
  var fragment = comment();
  var node = first_child(fragment);
  general_observer_default(node, {
    get disable_observer() {
      return disable_observer();
    },
    children: wrap_snippet(Buzzsprout, ($$anchor2, $$slotProps) => {
      var div = root_13();
      var iframe = child(div);
      set_style(iframe, `
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
      `);
      reset(div);
      template_effect(() => {
        set_style(div, `
      position: relative; 
      height: ${height()};
      width: ${width()};
    `);
        set_attribute(iframe, "title", `buzzsprout-${$$props.buzzsproutId}`);
        set_attribute(iframe, "src", `https://www.buzzsprout.com/${$$props.buzzsproutId}?client_source=admin&amp;iframe=true`);
      });
      append($$anchor2, div);
    }),
    $$slots: { default: true }
  });
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Buzzsprout = hmr(Buzzsprout, () => Buzzsprout[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Buzzsprout[HMR].source;
    set(Buzzsprout[HMR].source, module.default[HMR].original);
  });
}
var buzzsprout_default = Buzzsprout;
mark_module_end(Buzzsprout);

// node_modules/sveltekit-embed/dist/components/code-pen.svelte
mark_module_start();
Code_pen[FILENAME] = "node_modules/sveltekit-embed/dist/components/code-pen.svelte";
var root_14 = add_locations(template(`<iframe class="code-pen-sveltekit-embed" frameborder="no" allowfullscreen=""></iframe>`), Code_pen[FILENAME], [[38, 1]]);
function Code_pen($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Code_pen);
  let height = prop($$props, "height", 3, "500px"), width = prop($$props, "width", 3, "100%"), codePenId = prop($$props, "codePenId", 3, ""), tabs = prop($$props, "tabs", 3, "result"), clickToLoad = prop($$props, "clickToLoad", 3, true), editable = prop($$props, "editable", 3, true), theme = prop($$props, "theme", 3, "default"), disable_observer = prop($$props, "disable_observer", 3, false), iframe_styles = prop($$props, "iframe_styles", 19, () => `
			height: ${height()};
			width: ${width()};	
		`);
  const baseUrl = `https://codepen.io/team/codepen/embed`;
  const src = `${baseUrl}/${clickToLoad() ? "/preview" : ""}/${codePenId()}/?height=${height()}&theme-id=${theme()}&default-tab=${tabs()}&editable=${editable()}`;
  var fragment = comment();
  var node = first_child(fragment);
  general_observer_default(node, {
    get disable_observer() {
      return disable_observer();
    },
    children: wrap_snippet(Code_pen, ($$anchor2, $$slotProps) => {
      var iframe = root_14();
      set_attribute(iframe, "src", src);
      template_effect(() => {
        set_attribute(iframe, "title", `codepen-${codePenId()}`);
        set_style(iframe, iframe_styles());
      });
      append($$anchor2, iframe);
    }),
    $$slots: { default: true }
  });
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Code_pen = hmr(Code_pen, () => Code_pen[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Code_pen[HMR].source;
    set(Code_pen[HMR].source, module.default[HMR].original);
  });
}
var code_pen_default = Code_pen;
mark_module_end(Code_pen);

// node_modules/sveltekit-embed/dist/components/deezer.svelte
mark_module_start();
Deezer[FILENAME] = "node_modules/sveltekit-embed/dist/components/deezer.svelte";
var root_15 = add_locations(template(`<iframe title="deezer-widget" frameborder="0" allowtransparency="" allow="encrypted-media; clipboard-write"></iframe>`), Deezer[FILENAME], [[28, 1]]);
function Deezer($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Deezer);
  let theme = prop($$props, "theme", 3, "auto"), frameSrc = prop($$props, "frameSrc", 3, ""), height = prop($$props, "height", 3, "300px"), width = prop($$props, "width", 3, "100%"), disable_observer = prop($$props, "disable_observer", 3, false), iframe_styles = prop($$props, "iframe_styles", 19, () => `
			border-radius: 0.6rem;
			height: ${height()};
			width: ${width()};	
		`);
  var fragment = comment();
  var node = first_child(fragment);
  general_observer_default(node, {
    get disable_observer() {
      return disable_observer();
    },
    children: wrap_snippet(Deezer, ($$anchor2, $$slotProps) => {
      var iframe = root_15();
      template_effect(() => {
        set_attribute(iframe, "src", `https://widget.deezer.com/widget/${theme()}/${frameSrc()}`);
        set_style(iframe, iframe_styles());
      });
      append($$anchor2, iframe);
    }),
    $$slots: { default: true }
  });
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Deezer = hmr(Deezer, () => Deezer[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Deezer[HMR].source;
    set(Deezer[HMR].source, module.default[HMR].original);
  });
}
var deezer_default = Deezer;
mark_module_end(Deezer);

// node_modules/sveltekit-embed/dist/components/generic-embed.svelte
mark_module_start();
Generic_embed[FILENAME] = "node_modules/sveltekit-embed/dist/components/generic-embed.svelte";
var root_16 = add_locations(template(`<iframe></iframe> <!>`, 1), Generic_embed[FILENAME], [[26, 1]]);
function Generic_embed($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Generic_embed);
  let src = prop($$props, "src", 3, ""), title = prop($$props, "title", 3, ""), height = prop($$props, "height", 3, "152px"), width = prop($$props, "width", 3, "100%"), disable_observer = prop($$props, "disable_observer", 3, false), rest = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "src",
      "title",
      "height",
      "width",
      "disable_observer",
      "children"
    ],
    "rest"
  );
  var fragment = comment();
  var node = first_child(fragment);
  general_observer_default(node, {
    get disable_observer() {
      return disable_observer();
    },
    children: wrap_snippet(Generic_embed, ($$anchor2, $$slotProps) => {
      var fragment_1 = root_16();
      var iframe = first_child(fragment_1);
      let attributes;
      var node_1 = sibling(iframe, 2);
      snippet(node_1, () => $$props.children ?? noop);
      template_effect(() => attributes = set_attributes(iframe, attributes, {
        src: src(),
        width: width(),
        height: height(),
        title: title(),
        ...rest
      }));
      replay_events(iframe);
      append($$anchor2, fragment_1);
    }),
    $$slots: { default: true }
  });
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Generic_embed = hmr(Generic_embed, () => Generic_embed[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Generic_embed[HMR].source;
    set(Generic_embed[HMR].source, module.default[HMR].original);
  });
}
var generic_embed_default = Generic_embed;
mark_module_end(Generic_embed);

// node_modules/sveltekit-embed/dist/components/gist.svelte
mark_module_start();
Gist[FILENAME] = "node_modules/sveltekit-embed/dist/components/gist.svelte";
var root_17 = add_locations(template(`<iframe title="gist-widget" class="s-pFCRDDIWTlNX"></iframe>`), Gist[FILENAME], [[25, 1]]);
var $$css2 = {
  hash: "s-pFCRDDIWTlNX",
  code: "\n	iframe.s-pFCRDDIWTlNX {\n		border: 0;\n		width: 100%;\n		height: 100%;\n	}\n\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2lzdC5zdmVsdGUiLCJtYXBwaW5ncyI6IjtBQWdDQSxDQUFDLHFCQUFNLENBQUM7QUFDUixFQUFFLFNBQVM7QUFDWCxFQUFFLFdBQVc7QUFDYixFQUFFLFlBQVk7QUFDZCIsIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZXMiOlsiZ2lzdC5zdmVsdGUiXX0= */"
};
function Gist($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Gist);
  append_styles($$anchor, $$css2);
  let width = prop($$props, "width", 3, "100%"), height = prop($$props, "height", 3, "320px"), gistUri = prop($$props, "gistUri", 3, ""), disable_observer = prop($$props, "disable_observer", 3, false), iframe_styles = prop($$props, "iframe_styles", 19, () => `
			height: ${height()};
			width: ${width()};
		`);
  var fragment = comment();
  var node = first_child(fragment);
  general_observer_default(node, {
    get disable_observer() {
      return disable_observer();
    },
    children: wrap_snippet(Gist, ($$anchor2, $$slotProps) => {
      var iframe = root_17();
      template_effect(() => {
        set_attribute(iframe, "src", `https://gist.github.com/${gistUri() ?? ""}.pibb`);
        set_style(iframe, iframe_styles());
      });
      append($$anchor2, iframe);
    }),
    $$slots: { default: true }
  });
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Gist = hmr(Gist, () => Gist[HMR].source);
  import.meta.hot.accept((module) => {
    cleanup_styles("s-pFCRDDIWTlNX");
    module.default[HMR].source = Gist[HMR].source;
    set(Gist[HMR].source, module.default[HMR].original);
  });
}
var gist_default = Gist;
mark_module_end(Gist);

// node_modules/sveltekit-embed/dist/components/guild.svelte
mark_module_start();
Guild[FILENAME] = "node_modules/sveltekit-embed/dist/components/guild.svelte";
var root_18 = add_locations(template(`<div class="guild-card"><iframe data-testid="guild-card" frameborder="0" scrolling="no"></iframe></div>`), Guild[FILENAME], [[57, 1, [[65, 2]]]]);
function Guild($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Guild);
  let height = prop($$props, "height", 3, "380px"), width = prop($$props, "width", 3, "100%"), type = prop($$props, "type", 3, "guild"), display_type = prop($$props, "display_type", 3, "card"), disable_observer = prop($$props, "disable_observer", 3, false);
  var fragment = comment();
  var node = first_child(fragment);
  general_observer_default(node, {
    get disable_observer() {
      return disable_observer();
    },
    children: wrap_snippet(Guild, ($$anchor2, $$slotProps) => {
      var div = root_18();
      var iframe = child(div);
      set_style(iframe, `
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        border-radius: 0.5rem;
      `);
      reset(div);
      template_effect(() => {
        set_style(div, `
      position: relative;
      height: ${height()};
      width: ${width()};
    `);
        set_attribute(iframe, "title", `guild-card-${$$props.card_id}`);
        set_attribute(iframe, "src", `https://guild.host/embeds/${type()}/${$$props.card_id}/${display_type()}`);
        set_attribute(iframe, "height", height());
        set_attribute(iframe, "width", width());
      });
      append($$anchor2, div);
    }),
    $$slots: { default: true }
  });
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Guild = hmr(Guild, () => Guild[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Guild[HMR].source;
    set(Guild[HMR].source, module.default[HMR].original);
  });
}
var guild_default = Guild;
mark_module_end(Guild);

// node_modules/sveltekit-embed/dist/components/relive.svelte
mark_module_start();
Relive[FILENAME] = "node_modules/sveltekit-embed/dist/components/relive.svelte";
var root_19 = add_locations(template(`<div><iframe scrolling="no" frameborder="0" allowfullscreen=""></iframe></div>`), Relive[FILENAME], [[20, 1, [[28, 2]]]]);
function Relive($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Relive);
  let reliveId = prop($$props, "reliveId", 3, ""), width = prop($$props, "width", 3, "100%"), disable_observer = prop($$props, "disable_observer", 3, false);
  const defaultMargin = 2;
  var fragment = comment();
  var node = first_child(fragment);
  general_observer_default(node, {
    get disable_observer() {
      return disable_observer();
    },
    children: wrap_snippet(Relive, ($$anchor2, $$slotProps) => {
      var div = root_19();
      var iframe = child(div);
      set_style(iframe, `
        position: absolute;
        top: -${defaultMargin}px;
        left: -${defaultMargin}px;
        width: calc(100% + ${defaultMargin * 2}px);
        height: calc(100% + ${defaultMargin * 2}px);
      `);
      reset(div);
      template_effect(() => {
        set_style(div, `
      position: relative;
      width: ${width()};
      aspect-ratio: 1 / 0.7825;
      overflow: hidden;
    `);
        set_attribute(iframe, "title", `relive-${reliveId()}`);
        set_attribute(iframe, "src", `https://www.relive.cc/view/${reliveId()}/widget`);
      });
      append($$anchor2, div);
    }),
    $$slots: { default: true }
  });
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Relive = hmr(Relive, () => Relive[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Relive[HMR].source;
    set(Relive[HMR].source, module.default[HMR].original);
  });
}
var relive_default = Relive;
mark_module_end(Relive);

// node_modules/sveltekit-embed/dist/components/simple-cast.svelte
mark_module_start();
Simple_cast[FILENAME] = "node_modules/sveltekit-embed/dist/components/simple-cast.svelte";
var root_110 = add_locations(template(`<div class="simplecast-episode-svelte-embed"><iframe data-testid="simplecast-episode" frameBorder="no" scrolling="no" seamless></iframe></div>`), Simple_cast[FILENAME], [[18, 1, [[26, 2]]]]);
function Simple_cast($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Simple_cast);
  let episodeId = prop($$props, "episodeId", 3, ""), theme = prop($$props, "theme", 19, () => `dark`), disable_observer = prop($$props, "disable_observer", 3, false);
  var fragment = comment();
  var node = first_child(fragment);
  general_observer_default(node, {
    get disable_observer() {
      return disable_observer();
    },
    children: wrap_snippet(Simple_cast, ($$anchor2, $$slotProps) => {
      var div = root_110();
      set_style(div, `
      position: relative;
      height: 200px;
      width: 100%;
    `);
      var iframe = child(div);
      set_style(iframe, `
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
      `);
      reset(div);
      template_effect(() => {
        set_attribute(iframe, "title", `simplecast-${episodeId()}`);
        set_attribute(iframe, "src", `https://player.simplecast.com/${episodeId()}${strict_equals(theme(), `dark`) ? `?dark=true` : ``}`);
      });
      append($$anchor2, div);
    }),
    $$slots: { default: true }
  });
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Simple_cast = hmr(Simple_cast, () => Simple_cast[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Simple_cast[HMR].source;
    set(Simple_cast[HMR].source, module.default[HMR].original);
  });
}
var simple_cast_default = Simple_cast;
mark_module_end(Simple_cast);

// node_modules/sveltekit-embed/dist/components/slides.svelte
mark_module_start();
Slides[FILENAME] = "node_modules/sveltekit-embed/dist/components/slides.svelte";
var root_111 = add_locations(template(`<iframe scrolling="no" frameborder="0" allowfullscreen="" style="width: 100%;"></iframe>`), Slides[FILENAME], [[38, 1]]);
function Slides($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Slides);
  let width = prop($$props, "width", 3, "100%"), height = prop($$props, "height", 3, "420px"), username = prop($$props, "username", 3, ""), title = prop($$props, "title", 3, ""), byline = prop($$props, "byline", 3, "hidden"), share = prop($$props, "share", 3, "hidden"), style = prop($$props, "style", 3, "dark"), disable_observer = prop($$props, "disable_observer", 3, false);
  let baseUrl = `https://slides.com/${username()}/${title()}/embed?`;
  const config2 = {
    style: style(),
    byline: byline(),
    share: share()
  };
  const queryString = new URLSearchParams(config2);
  const src = `${baseUrl}&${queryString.toString()}`;
  var fragment = comment();
  var node = first_child(fragment);
  general_observer_default(node, {
    get disable_observer() {
      return disable_observer();
    },
    children: wrap_snippet(Slides, ($$anchor2, $$slotProps) => {
      var iframe = root_111();
      set_attribute(iframe, "src", src);
      template_effect(() => {
        set_attribute(iframe, "width", width());
        set_attribute(iframe, "height", height());
        set_attribute(iframe, "title", title());
      });
      append($$anchor2, iframe);
    }),
    $$slots: { default: true }
  });
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Slides = hmr(Slides, () => Slides[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Slides[HMR].source;
    set(Slides[HMR].source, module.default[HMR].original);
  });
}
var slides_default = Slides;
mark_module_end(Slides);

// node_modules/sveltekit-embed/dist/components/sound-cloud.svelte
mark_module_start();
Sound_cloud[FILENAME] = "node_modules/sveltekit-embed/dist/components/sound-cloud.svelte";
var root_112 = add_locations(template(`<iframe scrolling="false" frameborder="0" allow="autoplay"></iframe>`), Sound_cloud[FILENAME], [[24, 1]]);
function Sound_cloud($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Sound_cloud);
  let soundcloudLink = prop($$props, "soundcloudLink", 3, ""), width = prop($$props, "width", 3, "100%"), height = prop($$props, "height", 3, "300px"), showVisual = prop($$props, "showVisual", 3, true), disable_observer = prop($$props, "disable_observer", 3, false), iframe_styles = prop($$props, "iframe_styles", 3, "");
  var fragment = comment();
  var node = first_child(fragment);
  general_observer_default(node, {
    get disable_observer() {
      return disable_observer();
    },
    children: wrap_snippet(Sound_cloud, ($$anchor2, $$slotProps) => {
      var iframe = root_112();
      template_effect(() => {
        set_attribute(iframe, "width", width());
        set_attribute(iframe, "height", height());
        set_attribute(iframe, "title", `soundcloud-${soundcloudLink()}`);
        set_attribute(iframe, "src", `https://w.soundcloud.com/player/?url=${soundcloudLink() ?? ""}&visual=${showVisual() ?? ""}`);
        set_style(iframe, iframe_styles());
      });
      append($$anchor2, iframe);
    }),
    $$slots: { default: true }
  });
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Sound_cloud = hmr(Sound_cloud, () => Sound_cloud[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Sound_cloud[HMR].source;
    set(Sound_cloud[HMR].source, module.default[HMR].original);
  });
}
var sound_cloud_default = Sound_cloud;
mark_module_end(Sound_cloud);

// node_modules/sveltekit-embed/dist/components/spotify.svelte
mark_module_start();
Spotify[FILENAME] = "node_modules/sveltekit-embed/dist/components/spotify.svelte";
var root_113 = add_locations(template(`<iframe data-testid="spotify" class="spotify-sveltekit-embed" frameBorder="0" allow="encrypted-media"></iframe>`), Spotify[FILENAME], [[26, 1]]);
function Spotify($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Spotify);
  let spotifyLink = prop($$props, "spotifyLink", 3, ""), width = prop($$props, "width", 3, "100%"), height = prop($$props, "height", 3, "152px"), disable_observer = prop($$props, "disable_observer", 3, false), iframe_styles = prop($$props, "iframe_styles", 19, () => `
			border-radius: 0.8rem;
			height: ${height()};
			width: ${width()};
		`);
  var fragment = comment();
  var node = first_child(fragment);
  general_observer_default(node, {
    get disable_observer() {
      return disable_observer();
    },
    children: wrap_snippet(Spotify, ($$anchor2, $$slotProps) => {
      var iframe = root_113();
      template_effect(() => {
        set_attribute(iframe, "title", `spotify-${spotifyLink()}`);
        set_attribute(iframe, "src", `https://open.spotify.com/embed/${spotifyLink()}`);
        set_style(iframe, iframe_styles());
      });
      append($$anchor2, iframe);
    }),
    $$slots: { default: true }
  });
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Spotify = hmr(Spotify, () => Spotify[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Spotify[HMR].source;
    set(Spotify[HMR].source, module.default[HMR].original);
  });
}
var spotify_default = Spotify;
mark_module_end(Spotify);

// node_modules/sveltekit-embed/dist/components/stackblitz.svelte
mark_module_start();
Stackblitz[FILENAME] = "node_modules/sveltekit-embed/dist/components/stackblitz.svelte";
var root_114 = add_locations(template(`<iframe class="stackblitz-sveltekit-embed" frameborder="no" allowfullscreen=""></iframe>`), Stackblitz[FILENAME], [[57, 1]]);
function Stackblitz($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Stackblitz);
  let width = prop($$props, "width", 3, "100%"), height = prop($$props, "height", 3, "500px"), id = prop($$props, "id", 3, ""), view = prop($$props, "view", 3, "default"), clickToLoad = prop($$props, "clickToLoad", 3, true), hideNavigation = prop($$props, "hideNavigation", 3, false), hideExplorer = prop($$props, "hideExplorer", 3, true), theme = prop($$props, "theme", 3, "dark"), disable_observer = prop($$props, "disable_observer", 3, false), iframe_styles = prop($$props, "iframe_styles", 19, () => `
			height: ${height()};
			width: ${width()};
		`);
  let baseUrl = `https://stackblitz.com/edit/${id()}?embed=1`;
  const config2 = {
    ctl: `${clickToLoad() ? 1 : 0}`,
    hideExplorer: `${hideExplorer() ? 1 : 0}`,
    hideNavigation: `${hideNavigation() ? 1 : 0}`,
    theme: theme()
  };
  if (strict_equals(view(), "default", false)) {
    config2["view"] = view();
  }
  if ($$props.file) {
    config2["file"] = $$props.file;
  }
  const queryString = new URLSearchParams(config2);
  const src = `${baseUrl}&${queryString.toString()}`;
  var fragment = comment();
  var node = first_child(fragment);
  general_observer_default(node, {
    get disable_observer() {
      return disable_observer();
    },
    children: wrap_snippet(Stackblitz, ($$anchor2, $$slotProps) => {
      var iframe = root_114();
      set_attribute(iframe, "src", src);
      template_effect(() => {
        set_attribute(iframe, "title", `stackblitz-${id()}`);
        set_style(iframe, iframe_styles());
      });
      append($$anchor2, iframe);
    }),
    $$slots: { default: true }
  });
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Stackblitz = hmr(Stackblitz, () => Stackblitz[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Stackblitz[HMR].source;
    set(Stackblitz[HMR].source, module.default[HMR].original);
  });
}
var stackblitz_default = Stackblitz;
mark_module_end(Stackblitz);

// node_modules/sveltekit-embed/dist/components/tiktok.svelte
mark_module_start();
Tiktok[FILENAME] = "node_modules/sveltekit-embed/dist/components/tiktok.svelte";
var root_115 = add_locations(template(`<div class="tiktok-sveltekit-embed"><iframe data-testid="tiktok-embed" frameborder="0" scrolling="no" allow="encrypted-media; picture-in-picture; fullscreen"></iframe></div>`), Tiktok[FILENAME], [[64, 1, [[72, 2]]]]);
function Tiktok($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Tiktok);
  let width = prop($$props, "width", 3, "100%"), height = prop($$props, "height", 3, "600px"), controls = prop($$props, "controls", 3, true), progress_bar = prop($$props, "progress_bar", 3, true), play_button = prop($$props, "play_button", 3, true), volume_control = prop($$props, "volume_control", 3, true), fullscreen_button = prop($$props, "fullscreen_button", 3, true), timestamp = prop($$props, "timestamp", 3, true), loop = prop($$props, "loop", 3, false), autoplay = prop($$props, "autoplay", 3, false), music_info = prop($$props, "music_info", 3, false), description = prop($$props, "description", 3, false), rel = prop($$props, "rel", 3, true), native_context_menu = prop($$props, "native_context_menu", 3, true), closed_caption = prop($$props, "closed_caption", 3, true), disable_observer = prop($$props, "disable_observer", 3, false);
  const query_params = new URLSearchParams({
    controls: controls() ? "1" : "0",
    progress_bar: progress_bar() ? "1" : "0",
    play_button: play_button() ? "1" : "0",
    volume_control: volume_control() ? "1" : "0",
    fullscreen_button: fullscreen_button() ? "1" : "0",
    timestamp: timestamp() ? "1" : "0",
    loop: loop() ? "1" : "0",
    autoplay: autoplay() ? "1" : "0",
    music_info: music_info() ? "1" : "0",
    description: description() ? "1" : "0",
    rel: rel() ? "1" : "0",
    native_context_menu: native_context_menu() ? "1" : "0",
    closed_caption: closed_caption() ? "1" : "0"
  });
  const src = `https://www.tiktok.com/player/v1/${$$props.tiktokId}?${query_params.toString()}`;
  var fragment = comment();
  var node = first_child(fragment);
  general_observer_default(node, {
    get disable_observer() {
      return disable_observer();
    },
    children: wrap_snippet(Tiktok, ($$anchor2, $$slotProps) => {
      var div = root_115();
      var iframe = child(div);
      set_attribute(iframe, "src", src);
      set_style(iframe, `
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
      `);
      reset(div);
      template_effect(() => {
        set_style(div, `
      position: relative;
      width: ${width()};
      height: ${height()};
    `);
        set_attribute(iframe, "title", `tiktok-${$$props.tiktokId}`);
      });
      append($$anchor2, div);
    }),
    $$slots: { default: true }
  });
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Tiktok = hmr(Tiktok, () => Tiktok[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Tiktok[HMR].source;
    set(Tiktok[HMR].source, module.default[HMR].original);
  });
}
var tiktok_default = Tiktok;
mark_module_end(Tiktok);

// node_modules/sveltekit-embed/dist/components/toot.svelte
mark_module_start();
Toot[FILENAME] = "node_modules/sveltekit-embed/dist/components/toot.svelte";
var root2 = add_locations(template(`<div class="s-qu0JDpXtoHsw"><iframe title="" class="mastodon-embed s-qu0JDpXtoHsw" width="400" allowfullscreen=""></iframe></div>`), Toot[FILENAME], [[42, 0, [[43, 1]]]]);
var $$css3 = {
  hash: "s-qu0JDpXtoHsw",
  code: "\n	div.s-qu0JDpXtoHsw {\n		display: flex;\n		justify-content: center;\n		margin-bottom: 12px;\n	}\n\n	iframe.s-qu0JDpXtoHsw {\n		max-width: 100%;\n		border: 0;\n	}\n\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9vdC5zdmVsdGUiLCJtYXBwaW5ncyI6IjtBQW9EQSxDQUFDLGtCQUFHLENBQUM7QUFDTCxFQUFFLGFBQWE7QUFDZixFQUFFLHVCQUF1QjtBQUN6QixFQUFFLG1CQUFtQjtBQUNyQjs7QUFFQSxDQUFDLHFCQUFNLENBQUM7QUFDUixFQUFFLGVBQWU7QUFDakIsRUFBRSxTQUFTO0FBQ1giLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VzIjpbInRvb3Quc3ZlbHRlIl19 */"
};
function Toot($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Toot);
  append_styles($$anchor, $$css3);
  let instance = prop($$props, "instance", 3, ""), username = prop($$props, "username", 3, ""), tootId = prop($$props, "tootId", 3, "");
  let mastodon_embed_script = null;
  const load_mastodon_embed_script = () => {
    if (mastodon_embed_script) return;
    mastodon_embed_script = document.createElement("script");
    mastodon_embed_script.src = `https://${instance()}/embed.js`;
    mastodon_embed_script.async = true;
    document.head.appendChild(mastodon_embed_script);
  };
  const remove_mastodon_embed_script = () => {
    if (mastodon_embed_script) {
      document.head.removeChild(mastodon_embed_script);
      mastodon_embed_script = null;
    }
  };
  user_effect(() => {
    load_mastodon_embed_script();
    return () => {
      remove_mastodon_embed_script();
    };
  });
  let trimmedUsername = user_derived(() => username().trim());
  let atUsername = user_derived(() => get(trimmedUsername).startsWith("@") ? get(trimmedUsername) : `@${get(trimmedUsername)}`);
  var div = root2();
  var iframe = child(div);
  reset(div);
  template_effect(() => set_attribute(iframe, "src", `https://${instance()}/${get(atUsername)}/${tootId()}/embed`));
  append($$anchor, div);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Toot = hmr(Toot, () => Toot[HMR].source);
  import.meta.hot.accept((module) => {
    cleanup_styles("s-qu0JDpXtoHsw");
    module.default[HMR].source = Toot[HMR].source;
    set(Toot[HMR].source, module.default[HMR].original);
  });
}
var toot_default = Toot;
mark_module_end(Toot);

// node_modules/sveltekit-embed/dist/components/tweet.svelte
mark_module_start();
Tweet[FILENAME] = "node_modules/sveltekit-embed/dist/components/tweet.svelte";
var root3 = add_locations(template(`<div class="tweet-wrapper s-ZW-86EBLOUIk"><blockquote class="twitter-tweet s-ZW-86EBLOUIk"><a class="s-ZW-86EBLOUIk">Loading Tweet...</a></blockquote></div>`), Tweet[FILENAME], [
  [45, 0, [[50, 1, [[51, 2]]]]]
]);
var $$css4 = {
  hash: "s-ZW-86EBLOUIk",
  code: "\n	.tweet-wrapper.s-ZW-86EBLOUIk {\n		display: flex;\n		justify-content: center;\n		margin-bottom: 12px;\n		border-radius: 13px;\n		overflow: hidden;\n	}\n\n	.tweet-wrapper.s-ZW-86EBLOUIk iframe {\n		border-radius: 13px !important;\n	}\n\n	.twitter-tweet.s-ZW-86EBLOUIk {\n		display: block;\n		margin: 0;\n		padding: 0;\n	}\n\n	.twitter-tweet.s-ZW-86EBLOUIk a:where(.s-ZW-86EBLOUIk) {\n		color: #1da1f2;\n		font-weight: bold;\n		text-decoration: none;\n	}\n\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHdlZXQuc3ZlbHRlIiwibWFwcGluZ3MiOiI7QUF1REEsQ0FBQyw2QkFBYyxDQUFDO0FBQ2hCLEVBQUUsYUFBYTtBQUNmLEVBQUUsdUJBQXVCO0FBQ3pCLEVBQUUsbUJBQW1CO0FBQ3JCLEVBQUUsbUJBQW1CO0FBQ3JCLEVBQUUsZ0JBQWdCO0FBQ2xCOztBQUVBLENBQUMsNkJBQWMsQ0FBUyxNQUFPLENBQUM7QUFDaEMsRUFBRSw4QkFBOEI7QUFDaEM7O0FBRUEsQ0FBQyw2QkFBYyxDQUFDO0FBQ2hCLEVBQUUsY0FBYztBQUNoQixFQUFFLFNBQVM7QUFDWCxFQUFFLFVBQVU7QUFDWjs7QUFFQSxDQUFDLDZCQUFjLENBQUMsd0JBQUMsQ0FBQztBQUNsQixFQUFFLGNBQWM7QUFDaEIsRUFBRSxpQkFBaUI7QUFDbkIsRUFBRSxxQkFBcUI7QUFDdkIiLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VzIjpbInR3ZWV0LnN2ZWx0ZSJdfQ== */"
};
function Tweet($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Tweet);
  append_styles($$anchor, $$css4);
  let tweetLink = prop($$props, "tweetLink", 3, ""), theme = prop($$props, "theme", 3, "light");
  let twitter_widgets_script = state(null);
  const load_twitter_widgets_script = () => {
    if (document.querySelector('script[src*="platform.twitter.com/widgets.js"]')) {
      return;
    }
    if (get(twitter_widgets_script)) return;
    set(twitter_widgets_script, document.createElement("script"));
    get(twitter_widgets_script).src = "https://platform.twitter.com/widgets.js";
    get(twitter_widgets_script).async = true;
    document.head.appendChild(get(twitter_widgets_script));
  };
  const remove_twitter_widget_script = () => {
    if (!get(twitter_widgets_script)) return;
    document.head.removeChild(get(twitter_widgets_script));
    set(twitter_widgets_script, null);
  };
  effect_root(() => {
    load_twitter_widgets_script();
    return () => {
      remove_twitter_widget_script();
    };
  });
  var div = root3();
  var blockquote = child(div);
  var a = child(blockquote);
  reset(blockquote);
  reset(div);
  template_effect(() => {
    set_attribute(div, "data-theme", theme());
    set_attribute(div, "data-loaded", equals(get(twitter_widgets_script), null, false));
    set_attribute(blockquote, "data-theme", theme());
    set_attribute(a, "href", `https://twitter.com/${tweetLink()}`);
  });
  append($$anchor, div);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Tweet = hmr(Tweet, () => Tweet[HMR].source);
  import.meta.hot.accept((module) => {
    cleanup_styles("s-ZW-86EBLOUIk");
    module.default[HMR].source = Tweet[HMR].source;
    set(Tweet[HMR].source, module.default[HMR].original);
  });
}
var tweet_default = Tweet;
mark_module_end(Tweet);

// node_modules/sveltekit-embed/dist/utils/index.js
var config = {
  "1:1": `padding-top: 100%;`,
  "16:9": `padding-top: 56.25%;`,
  "4:3": `padding-top: 75%;`,
  "3:2": `padding-top: 66.66%;`,
  "8.5": `padding-top: 62.5%;`
};
var getPadding = (aspectRatio) => {
  return config[aspectRatio];
};

// node_modules/sveltekit-embed/dist/components/vimeo.svelte
mark_module_start();
Vimeo[FILENAME] = "node_modules/sveltekit-embed/dist/components/vimeo.svelte";
var root_116 = add_locations(template(`<div data-testid="vimeo" class="vimeo-svelte-embed"><iframe frameBorder="0" allow="autoplay; fullscreen; picture-in-picture" allowFullScreen=""></iframe></div>`), Vimeo[FILENAME], [[25, 1, [[34, 2]]]]);
function Vimeo($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Vimeo);
  let vimeoId = prop($$props, "vimeoId", 3, ""), autoPlay = prop($$props, "autoPlay", 3, false), aspectRatio = prop($$props, "aspectRatio", 3, "16:9"), skipTo = prop($$props, "skipTo", 19, () => ({ h: 0, m: 0, s: 0 })), disable_observer = prop($$props, "disable_observer", 3, false);
  const { h, m, s } = skipTo();
  var fragment = comment();
  var node = first_child(fragment);
  general_observer_default(node, {
    get disable_observer() {
      return disable_observer();
    },
    children: wrap_snippet(Vimeo, ($$anchor2, $$slotProps) => {
      var div = root_116();
      var iframe = child(div);
      set_style(iframe, `
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
    `);
      reset(div);
      template_effect(
        ($0) => {
          set_style(div, $0);
          set_attribute(iframe, "title", `vimeo-${vimeoId()}`);
          set_attribute(iframe, "src", `https://player.vimeo.com/video/${vimeoId()}?autoplay=${autoPlay()}#t=${h}h${m}m${s}s`);
        },
        [
          () => `
    	position: relative;
    	width: 100%;
   		${getPadding(aspectRatio())}
  `
        ]
      );
      append($$anchor2, div);
    }),
    $$slots: { default: true }
  });
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Vimeo = hmr(Vimeo, () => Vimeo[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Vimeo[HMR].source;
    set(Vimeo[HMR].source, module.default[HMR].original);
  });
}
var vimeo_default = Vimeo;
mark_module_end(Vimeo);

// node_modules/sveltekit-embed/dist/components/you-tube.svelte
mark_module_start();
You_tube[FILENAME] = "node_modules/sveltekit-embed/dist/components/you-tube.svelte";
var root_117 = add_locations(template(`<div><iframe data-testid="youTube" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe></div>`), You_tube[FILENAME], [[57, 1, [[64, 2]]]]);
function You_tube($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, You_tube);
  let youTubeId = prop($$props, "youTubeId", 3, ""), listId = prop($$props, "listId", 3, ""), index = prop($$props, "index", 3, 0), autoPlay = prop($$props, "autoPlay", 3, false), aspectRatio = prop($$props, "aspectRatio", 3, "16:9"), skipTo = prop($$props, "skipTo", 19, () => ({ h: 0, m: 0, s: 0 })), disable_observer = prop($$props, "disable_observer", 3, false), iframe_styles = prop($$props, "iframe_styles", 19, () => `
			border-radius: 0.6rem;
		`), mute = prop($$props, "mute", 3, false), controls = prop($$props, "controls", 3, true), loop = prop($$props, "loop", 3, false), modestBranding = prop($$props, "modestBranding", 3, false), rel = prop($$props, "rel", 3, false);
  const { h, m, s } = skipTo();
  const tH = h * 60 * 60;
  const tM = m * 60;
  const startTime = tH + tM + s;
  const baseUrl = `https://www.youtube-nocookie.com/embed/`;
  const src = `${baseUrl}${youTubeId().length > 0 ? `${youTubeId()}?autoplay=${Number(autoPlay())}&start=${startTime}&mute=${Number(mute())}&controls=${Number(controls())}&loop=${Number(loop())}&modestbranding=${Number(modestBranding())}&rel=${Number(rel())}` : `?videoseries&list=${listId()}&index=${index()}&autoplay=${Number(autoPlay())}&start=${startTime}&mute=${Number(mute())}&controls=${Number(controls())}&loop=${Number(loop())}&modestbranding=${Number(modestBranding())}&rel=${Number(rel())}`}`;
  var fragment = comment();
  var node = first_child(fragment);
  general_observer_default(node, {
    get disable_observer() {
      return disable_observer();
    },
    children: wrap_snippet(You_tube, ($$anchor2, $$slotProps) => {
      var div = root_117();
      var iframe = child(div);
      set_attribute(iframe, "src", src);
      reset(div);
      template_effect(
        ($0) => {
          set_style(div, $0);
          set_attribute(iframe, "title", `youTube-${listId().length > 0 ? listId() : youTubeId()}`);
          set_style(iframe, `
	      position: absolute;
  	    top: 0;
    	  left: 0;
      	width: 100%;
      	height: 100%;
				${iframe_styles()}
    `);
        },
        [
          () => `
    	position: relative;
    	width: 100%;
  	  ${getPadding(aspectRatio())}
  `
        ]
      );
      append($$anchor2, div);
    }),
    $$slots: { default: true }
  });
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  You_tube = hmr(You_tube, () => You_tube[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = You_tube[HMR].source;
    set(You_tube[HMR].source, module.default[HMR].original);
  });
}
var you_tube_default = You_tube;
mark_module_end(You_tube);

// node_modules/sveltekit-embed/dist/components/zencastr.svelte
mark_module_start();
Zencastr[FILENAME] = "node_modules/sveltekit-embed/dist/components/zencastr.svelte";
var root4 = add_locations(template(`<section style="display:flex; justify-content: center;"><blockquote class="zenplayer" style="background: black; border-radius: 12px; font-family: system-ui; width: 480px; height: 480px; position: relative; color: white; margin: 0;"><img alt="" style="width: 120px; display: inline-block; position: absolute; top: calc(50%); left: calc(50%); transform: translate(-50%, -50%);"> <a target="_blank" rel="noopener noreferrer" style="color: white; position: absolute; bottom: 12px; left: 50%; transform: translateX(-50%); text-decoration: none;">View on Zencastr</a></blockquote></section>`), Zencastr[FILENAME], [
  [
    19,
    0,
    [[20, 1, [[25, 2], [29, 2]]]]
  ]
]);
function Zencastr($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Zencastr);
  let zencastrId = prop($$props, "zencastrId", 3, "");
  onMount(() => {
    const script = document.createElement("script");
    script.async = true;
    script.src = "https://zencastr.com/static/js/embed-player.js";
    document.body.appendChild(script);
  });
  var section = root4();
  var blockquote = child(section);
  var a = sibling(child(blockquote), 2);
  reset(blockquote);
  reset(section);
  template_effect(() => {
    set_attribute(blockquote, "data-episode-href", `https://zencastr.com/embed/${zencastrId()}`);
    set_attribute(a, "href", `https://zencastr.com/embed/${zencastrId()}`);
  });
  append($$anchor, section);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Zencastr = hmr(Zencastr, () => Zencastr[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Zencastr[HMR].source;
    set(Zencastr[HMR].source, module.default[HMR].original);
  });
}
var zencastr_default = Zencastr;
mark_module_end(Zencastr);
export {
  anchor_fm_default as AnchorFm,
  bluesky_default as Bluesky,
  buzzsprout_default as Buzzsprout,
  code_pen_default as CodePen,
  deezer_default as Deezer,
  general_observer_default as GeneralObserver,
  generic_embed_default as GenericEmbed,
  gist_default as Gist,
  guild_default as Guild,
  relive_default as Relive,
  simple_cast_default as SimpleCast,
  slides_default as Slides,
  sound_cloud_default as SoundCloud,
  spotify_default as Spotify,
  stackblitz_default as StackBlitz,
  tiktok_default as TikTok,
  toot_default as Toot,
  tweet_default as Tweet,
  vimeo_default as Vimeo,
  you_tube_default as YouTube,
  zencastr_default as Zencastr
};
//# sourceMappingURL=sveltekit-embed.js.map
